-- CODING ERRORS
DECLARE
    L_VAR   NUMBER;
BEGIN
    L_VAR := 'A';
END;
/

-- CODIGN ERROR TRAPPED AND IGNORE 
--ADDING GENERIC EXCEPTION HANDLER
DECLARE
    L_VAR   NUMBER;
BEGIN
    L_VAR := 'A';
    EXCEPTION 
        WHEN OTHERS THEN
        NULL;
END;
/

-- CODING ERROP TRAPPED AND INFO DISPLAY
DECLARE
    L_VAR   NUMBER;
BEGIN
    L_VAR := 'A';
    EXCEPTION 
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLCODE);
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/

-- CODING ERROR TRAPPED AND RE-RAISE
DECLARE
    L_VAR   NUMBER;
BEGIN
    L_VAR := 'A';
    EXCEPTION 
        WHEN OTHERS THEN
        RAISE;
END;
/



-- DB ERROR UNHANDLED
BEGIN
    INSERT INTO ANIMAL VALUES(1,'DUPLICATE TIGER');
END;
/


-- DB ERRRO HANDLE
BEGIN
    INSERT INTO ANIMAL VALUES(1,'DUPLICATE TIGER');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        dbms_output.put_line('THAT ANIMAL ALREADY EXISTS');
END;
/


-- DISPLAY ERROR STACK
BEGIN
    INSERT INTO ANIMAL VALUES(1,'DUPLICATE TIGER');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        dbms_output.put_line(DBMS_UTILITY.format_error_stack);
END;
/



-- DISPLAY DETAILED CALLED STACKED FOR ERROR
BEGIN
    INSERT INTO ANIMAL VALUES(1,'DUPLICATE TIGER');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        dbms_output.put_line(DBMS_UTILITY.format_error_backtrace);
END;
/


-- EVEN SUCCESS HAS AN "ERROR" CODE
BEGIN
    DBMS_OUTPUT.PUT_LINE(SQLCODE);
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/