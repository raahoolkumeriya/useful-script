-- ANONYMOUS BLOCK
BEGIN
    DBMS_OUTPUT.PUT_LINE('DB Procedures');
END;
/

CREATE OR REPLACE PROCEDURE DB_PROC AS
BEGIN
    DBMS_OUTPUT.PUT_LINE('DB Procedures');
END;
/

BEGIN
    DB_PROC;
END;
/

EXECUTE DB_PROC;


-- QUERY DB OBJECT FOR PROCEDURE
SELECT OBJECT_TYPE, OBJECT_NAME, STATUS
    FROM USER_OBJECTS
WHERE object_name = 'DB_PROC';


--  PROCUDERE WITH RUN-TIME ERROR
CREATE OR REPLACE PROCEDURE DB_PROC AS 
BEGIN
    RAISE_APPLICATION_ERROR(-20000,'Error IN Proc');
END;
/

EXEC DB_PROC;



SELECT * FROM ANIMAL;

-- PROCEDURE THAT REFERENCE A DB TABLE
CREATE OR REPLACE PROCEDURE DB_PROC AS
BEGIN
    DELETE ANIMAL;
END;
/

-- IF ANY MODIFICATION CARRIED OUT ON TABEL PROCEDURE NEED TO RECOMPILE 

ALTER TABLE ANIMAL 
MODIFY (ANIMAL_NAME VARCHAR2(10));

SELECT OBJECT_TYPE, OBJECT_NAME, STATUS
    FROM USER_OBJECTS
WHERE object_name = 'DB_PROC';

/* pROCEDURE IS INVALID  -- NEED TO RECOMPILE*/

ALTER PROCEDURE DB_PROC COMPILE;


BEGIN
    DB_PROC;
    DB_PROC;
END;
/

SELECT PARSE_CALLS, EXECUTIONS 
FROM V$SQL 
WHERE INSTR(SQL_TEXT,'DELETE ANIMAL') > 0
    AND INSTR(SQL_TEXT,'SELECT') = 0;
    

-------------------------------------------------
-- CALLING DATABASE PROCEDURE
-- IN 
-- OUT
-- IN OUT
-- DEFAULT VALUES
-- SCALAR AND NON-SCALER DATATYPES
-------------------------------------------------

-- PROCEDURE WITH IN PARAMETER
CREATE OR REPLACE PROCEDURE DB_PROC (p_var IN VARCHAR2 := 'DEFAULT') AS
BEGIN
    DBMS_OUTPUT.PUT_LINE(p_var);
END;
/

BEGIN
    DB_PROC;
    DB_PROC('NO DEFAULT');
END;
/

-- PROCEDURE WITH PARAMATER IN OUT
CREATE OR REPLACE PROCEDURE DB_PROC ( p_var IN OUT VARCHAR2 ) AS 
BEGIN
    p_var := p_var || '1';
    DBMS_OUTPUT.PUT_LINE(p_var);
END;
/


DECLARE
    v_local_var VARCHAR2(100) := 'ABC';
BEGIN
    DB_PROC(v_local_var);
    DBMS_OUTPUT.PUT_LINE('Returned Value '|| V_local_var);
END;
/


-- PROCEDURE WITH IN PARAMTER AND OUT PARAMETER
CREATE OR REPLACE PROCEDURE DB_PROC (P_var_in IN VARCHAR2 := 'DEFAULT',
                                    p_var_out OUT VARCHAR2) AS
BEGIN
    DBMS_OUTPUT.PUT_LINE(P_var_in);
    p_var_out := P_var_in || '1';
END;
/


-- POSITIONAL ADN EXPLICLIT NOTITION
DECLARE
    v_local_var VARCHAR2(100);
BEGIN
    DB_PROC('ABC', v_local_var);
    DBMS_OUTPUT.PUT_LINE('RETURNED VALUE '||v_local_var);
    DB_PROC(P_var_out => v_local_var);
    DBMS_OUTPUT.PUT_LINE('RETURNED VALUE '||v_local_var);
END;
/



--- NON SCALER PARAMTERES
CREATE OR REPLACE PROCEDURE DB_PROC (p_animal ANIMAL%ROWTYPE ) AS
BEGIN
    DBMS_OUTPUT.PUT_LINE(p_animal.animal_name);
END;
/


BEGIN
    FOR v_animal IN ( SELECT * FROM ANIMAL) LOOP
    DB_PROC(v_animal);
    END LOOP;
END;
/

